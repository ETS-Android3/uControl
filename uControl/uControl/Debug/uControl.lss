
uControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000444  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b8  00000000  00000000  00000473  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00005b97  00000000  00000000  0000052b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00003ef8  00000000  00000000  000060c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008e8  00000000  00000000  00009fba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000194  00000000  00000000  0000a8a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000029cd  00000000  00000000  0000aa38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000204  00000000  00000000  0000d405  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  0000d609  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000003ec  000003ec  00000440  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000d694  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.int_init 0000001a  00000378  00000378  000003cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_104 000000e6  00000220  00000220  00000274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.tcc0_init 00000012  000003be  000003be  00000412  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000050  00000306  00000306  0000035a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.spi_init 00000018  00000392  00000392  000003e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.spi_write 0000000e  000003d0  000003d0  00000424  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.spi_read 00000014  000003aa  000003aa  000003fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.usartd0_init 00000022  00000356  00000356  000003aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.usartd0_out_char 0000000e  000003de  000003de  00000432  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
   8:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
   c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  10:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  14:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  18:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  1c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  20:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  24:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  28:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  2c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  30:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  34:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  38:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  3c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  40:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  44:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  48:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  4c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  50:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  54:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  58:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  5c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  60:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  64:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  68:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  6c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  70:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  74:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  78:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  7c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  80:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  84:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  88:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  8c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  90:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  94:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  98:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  9c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  a0:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  a4:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  a8:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  ac:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  b0:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  b4:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  b8:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  bc:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  c0:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  c4:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  c8:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  cc:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  d0:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  d4:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  d8:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  dc:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  e0:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  e4:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  e8:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  ec:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  f0:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  f4:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  f8:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
  fc:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 100:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 104:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 108:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 10c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 110:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 114:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 118:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 11c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 120:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 124:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 128:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 12c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 130:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 134:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 138:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 13c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 140:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 144:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 148:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 14c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 150:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 154:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 158:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 15c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 160:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 164:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 168:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 16c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 170:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 174:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 178:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 17c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 180:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 184:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 188:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 18c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 190:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 194:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 198:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 19c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1a0:	0c 94 10 01 	jmp	0x220	; 0x220 <_etext>
 1a4:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1a8:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1ac:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1b0:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1b4:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1b8:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1bc:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1c0:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1c4:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1c8:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1cc:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1d0:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1d4:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1d8:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1dc:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1e0:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1e4:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1e8:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1ec:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1f0:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1f4:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>
 1f8:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59
 214:	0e 94 83 01 	call	0x306	; 0x306 <main>
 218:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>

Disassembly of section .text:

000003ec <__bad_interrupt>:
 3ec:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.int_init:

00000378 <int_init>:


void int_init(void)
{
	//Enable low level interrupts
	PMIC.CTRL = PMIC_LOLVLEN_bm;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
	//Enable global interrupts
	sei();
 37e:	78 94       	sei
	PORTF.DIRCLR = IRQ_bm; //Make input
 380:	e0 ea       	ldi	r30, 0xA0	; 160
 382:	f6 e0       	ldi	r31, 0x06	; 6
 384:	98 e0       	ldi	r25, 0x08	; 8
 386:	92 83       	std	Z+2, r25	; 0x02
	PORTF.OUTCLR = IRQ_bm;
 388:	96 83       	std	Z+6, r25	; 0x06
	PORTF.INTCTRL = 0x01; //Low level interrupts on PORTF
 38a:	81 87       	std	Z+9, r24	; 0x09
	PORTF.INT0MASK = IRQ_bm; //PIN3 Interrupt enable
 38c:	92 87       	std	Z+10, r25	; 0x0a
	PORTF.PIN3CTRL = PORT_ISC_RISING_gc; //Sense only on rising edge
 38e:	83 8b       	std	Z+19, r24	; 0x13
 390:	08 95       	ret

Disassembly of section .text.__vector_104:

00000220 <__vector_104>:
	//PORTF.INTFLAGS INT0IF is flag
	
	
}

ISR(PORTF_INT0_vect){
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	08 b6       	in	r0, 0x38	; 56
 22c:	0f 92       	push	r0
 22e:	18 be       	out	0x38, r1	; 56
 230:	09 b6       	in	r0, 0x39	; 57
 232:	0f 92       	push	r0
 234:	19 be       	out	0x39, r1	; 57
 236:	0a b6       	in	r0, 0x3a	; 58
 238:	0f 92       	push	r0
 23a:	1a be       	out	0x3a, r1	; 58
 23c:	0b b6       	in	r0, 0x3b	; 59
 23e:	0f 92       	push	r0
 240:	1b be       	out	0x3b, r1	; 59
 242:	1f 93       	push	r17
 244:	2f 93       	push	r18
 246:	3f 93       	push	r19
 248:	4f 93       	push	r20
 24a:	5f 93       	push	r21
 24c:	6f 93       	push	r22
 24e:	7f 93       	push	r23
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	af 93       	push	r26
 256:	bf 93       	push	r27
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	ef 93       	push	r30
 25e:	ff 93       	push	r31
	
	//Every time a packet is ready in the buffer of the device, we need to read it in.
	
 	//PORTF.OUTTGL = 1;
	PORTF.OUTCLR = SS_bm;
 260:	c0 ea       	ldi	r28, 0xA0	; 160
 262:	d6 e0       	ldi	r29, 0x06	; 6
 264:	10 e1       	ldi	r17, 0x10	; 16
 266:	1e 83       	std	Y+6, r17	; 0x06
	usartd0_out_char(spi_read());
 268:	0e 94 d5 01 	call	0x3aa	; 0x3aa <spi_read>
 26c:	0e 94 ef 01 	call	0x3de	; 0x3de <usartd0_out_char>
	usartd0_out_char(spi_read());
 270:	0e 94 d5 01 	call	0x3aa	; 0x3aa <spi_read>
 274:	0e 94 ef 01 	call	0x3de	; 0x3de <usartd0_out_char>
	usartd0_out_char(spi_read());
 278:	0e 94 d5 01 	call	0x3aa	; 0x3aa <spi_read>
 27c:	0e 94 ef 01 	call	0x3de	; 0x3de <usartd0_out_char>
	usartd0_out_char(spi_read());
 280:	0e 94 d5 01 	call	0x3aa	; 0x3aa <spi_read>
 284:	0e 94 ef 01 	call	0x3de	; 0x3de <usartd0_out_char>
	usartd0_out_char(spi_read());
 288:	0e 94 d5 01 	call	0x3aa	; 0x3aa <spi_read>
 28c:	0e 94 ef 01 	call	0x3de	; 0x3de <usartd0_out_char>
	usartd0_out_char(spi_read());
 290:	0e 94 d5 01 	call	0x3aa	; 0x3aa <spi_read>
 294:	0e 94 ef 01 	call	0x3de	; 0x3de <usartd0_out_char>
	usartd0_out_char(spi_read());
 298:	0e 94 d5 01 	call	0x3aa	; 0x3aa <spi_read>
 29c:	0e 94 ef 01 	call	0x3de	; 0x3de <usartd0_out_char>
	usartd0_out_char(spi_read());
 2a0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <spi_read>
 2a4:	0e 94 ef 01 	call	0x3de	; 0x3de <usartd0_out_char>
	usartd0_out_char(spi_read());
 2a8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <spi_read>
 2ac:	0e 94 ef 01 	call	0x3de	; 0x3de <usartd0_out_char>
	usartd0_out_char(spi_read());
 2b0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <spi_read>
 2b4:	0e 94 ef 01 	call	0x3de	; 0x3de <usartd0_out_char>
	usartd0_out_char(spi_read());
 2b8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <spi_read>
 2bc:	0e 94 ef 01 	call	0x3de	; 0x3de <usartd0_out_char>
	usartd0_out_char(spi_read());
 2c0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <spi_read>
 2c4:	0e 94 ef 01 	call	0x3de	; 0x3de <usartd0_out_char>
	PORTF.OUTSET = SS_bm;
 2c8:	1d 83       	std	Y+5, r17	; 0x05
	
	PORTF.INTFLAGS = 1; //Reset interrupt flag
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	8c 87       	std	Y+12, r24	; 0x0c
}
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	bf 91       	pop	r27
 2d8:	af 91       	pop	r26
 2da:	9f 91       	pop	r25
 2dc:	8f 91       	pop	r24
 2de:	7f 91       	pop	r23
 2e0:	6f 91       	pop	r22
 2e2:	5f 91       	pop	r21
 2e4:	4f 91       	pop	r20
 2e6:	3f 91       	pop	r19
 2e8:	2f 91       	pop	r18
 2ea:	1f 91       	pop	r17
 2ec:	0f 90       	pop	r0
 2ee:	0b be       	out	0x3b, r0	; 59
 2f0:	0f 90       	pop	r0
 2f2:	0a be       	out	0x3a, r0	; 58
 2f4:	0f 90       	pop	r0
 2f6:	09 be       	out	0x39, r0	; 57
 2f8:	0f 90       	pop	r0
 2fa:	08 be       	out	0x38, r0	; 56
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

Disassembly of section .text.tcc0_init:

000003be <tcc0_init>:


void tcc0_init(void)
{
//Load digital period (0.25secs)*(2MHz/8) = 62500; 4Hz
TCC0.PER = 7812;
 3be:	e0 e0       	ldi	r30, 0x00	; 0
 3c0:	f8 e0       	ldi	r31, 0x08	; 8
 3c2:	84 e8       	ldi	r24, 0x84	; 132
 3c4:	9e e1       	ldi	r25, 0x1E	; 30
 3c6:	86 a3       	std	Z+38, r24	; 0x26
 3c8:	97 a3       	std	Z+39, r25	; 0x27

//CH0 Event trigger on overflow
//EVSYS_CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;

//Load prescaler to start the timer prescaler of 8
TCC0.CTRLA = TC_CLKSEL_DIV256_gc;
 3ca:	86 e0       	ldi	r24, 0x06	; 6
 3cc:	80 83       	st	Z, r24
 3ce:	08 95       	ret

Disassembly of section .text.main:

00000306 <main>:
}


int main(void)
{
	int_init();
 306:	0e 94 bc 01 	call	0x378	; 0x378 <int_init>
	tcc0_init(); //Initialize Timer Counter Module 0
 30a:	0e 94 df 01 	call	0x3be	; 0x3be <tcc0_init>
	spi_init();
 30e:	0e 94 c9 01 	call	0x392	; 0x392 <spi_init>
	usartd0_init();
 312:	0e 94 ab 01 	call	0x356	; 0x356 <usartd0_init>
	
	PORTF.DIRSET = 1;
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7de6a1>
	
    while(1)
    {
		

		while(!(TCC0.INTFLAGS & 1)); //Poll timer to check for overflow
 31c:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <__TEXT_REGION_LENGTH__+0x7de80c>
 320:	80 ff       	sbrs	r24, 0
 322:	fc cf       	rjmp	.-8      	; 0x31c <main+0x16>
		TCC0.INTFLAGS = 1; //Reset the timer
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <__TEXT_REGION_LENGTH__+0x7de80c>
		
		//spi_write_string("ATI");
		//usartd0_out_char(spi_read());
		
		
		PORTF.OUTCLR = SS_bm;
 32a:	c0 ea       	ldi	r28, 0xA0	; 160
 32c:	d6 e0       	ldi	r29, 0x06	; 6
 32e:	10 e1       	ldi	r17, 0x10	; 16
 330:	1e 83       	std	Y+6, r17	; 0x06
	
		spi_write(0x10);           //10-01-0A-nBytes-0byte-1byte-...-nbyte this sends to uart
 332:	80 e1       	ldi	r24, 0x10	; 16
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <spi_write>
		spi_write(0x02);
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <spi_write>
		spi_write(0x0A);
 342:	8a e0       	ldi	r24, 0x0A	; 10
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <spi_write>
		spi_write(0x00);
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <spi_write>
		//spi_write_string("This is a test.\n");
		
		PORTF.OUTSET = SS_bm;
 352:	1d 83       	std	Y+5, r17	; 0x05
		
		
		


    }
 354:	e3 cf       	rjmp	.-58     	; 0x31c <main+0x16>

Disassembly of section .text.spi_init:

00000392 <spi_init>:
void spi_write_string(const char * str){
	while(*str)
	{
		spi_write(*(str++));
	}
}
 392:	e0 ea       	ldi	r30, 0xA0	; 160
 394:	f6 e0       	ldi	r31, 0x06	; 6
 396:	80 e1       	ldi	r24, 0x10	; 16
 398:	85 83       	std	Z+5, r24	; 0x05
 39a:	80 eb       	ldi	r24, 0xB0	; 176
 39c:	81 83       	std	Z+1, r24	; 0x01
 39e:	80 e4       	ldi	r24, 0x40	; 64
 3a0:	82 83       	std	Z+2, r24	; 0x02
 3a2:	81 e5       	ldi	r24, 0x51	; 81
 3a4:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <__TEXT_REGION_LENGTH__+0x7debc0>
 3a8:	08 95       	ret

Disassembly of section .text.spi_write:

000003d0 <spi_write>:
void spi_write(uint8_t data)
{

	
	//Write data to the buffer to initiate a transfer.
	SPIF.DATA = data;
 3d0:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>
	
	//Wait for transmission to complete
	while(!(SPIF.STATUS & SPI_IF_bm));
 3d4:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <__TEXT_REGION_LENGTH__+0x7debc2>
 3d8:	88 23       	and	r24, r24
 3da:	e4 f7       	brge	.-8      	; 0x3d4 <spi_write+0x4>
	//PORTF.OUTSET = SS_bm;
	
}
 3dc:	08 95       	ret

Disassembly of section .text.spi_read:

000003aa <spi_read>:
uint8_t spi_read(void)
{
	
	
	/* Write some arbitrary data to initiate a transfer. */
	SPIF.DATA = 0x01;
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>

	//Wait for transmission to complete by polling the interrupt flag
	while(!(SPIF.STATUS & SPI_IF_bm));
 3b0:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <__TEXT_REGION_LENGTH__+0x7debc2>
 3b4:	88 23       	and	r24, r24
 3b6:	e4 f7       	brge	.-8      	; 0x3b0 <spi_read+0x6>
	
	//PORTF.OUTSET = SS_bm;
	
	/* After the transmission, return the data that was received. */
	return SPIF.DATA;
 3b8:	80 91 c3 0b 	lds	r24, 0x0BC3	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>
}
 3bc:	08 95       	ret

Disassembly of section .text.usartd0_init:

00000356 <usartd0_init>:
}

void usartd0_init(void)
{
  /* Configure relevant TxD and RxD pins. */
	PORTD.OUTSET = PIN3_bm;
 356:	e0 e6       	ldi	r30, 0x60	; 96
 358:	f6 e0       	ldi	r31, 0x06	; 6
 35a:	88 e0       	ldi	r24, 0x08	; 8
 35c:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = PIN3_bm;
 35e:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 360:	84 e0       	ldi	r24, 0x04	; 4
 362:	82 83       	std	Z+2, r24	; 0x02

  /* Configure baud rate. */
	USARTD0.BAUDCTRLA = (uint8_t)BSEL;
 364:	e0 ea       	ldi	r30, 0xA0	; 160
 366:	f9 e0       	ldi	r31, 0x09	; 9
 368:	8c e0       	ldi	r24, 0x0C	; 12
 36a:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((BSCALE << 4)|(BSEL >> 8));
 36c:	17 82       	std	Z+7, r1	; 0x07
	/*USARTD0.CTRLC =	(USART_CMODE_ASYNCHRONOUS_gc |
					 USART_PMODE_ODD_gc  	 |
					 USART_CHSIZE_8BIT_gc)       &
					 ~USART_SBMODE_bm; */
	
	USARTD0.CTRLC = (USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc) & ~USART_SBMODE_bm;
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	85 83       	std	Z+5, r24	; 0x05

  /* Enable receiver and/or transmitter systems. */
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 372:	88 e1       	ldi	r24, 0x18	; 24
 374:	84 83       	std	Z+4, r24	; 0x04
 376:	08 95       	ret

Disassembly of section .text.usartd0_out_char:

000003de <usartd0_out_char>:

}

void usartd0_out_char(char c)
{
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 3de:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7de9a1>
 3e2:	95 ff       	sbrs	r25, 5
 3e4:	fc cf       	rjmp	.-8      	; 0x3de <usartd0_out_char>
	USARTD0.DATA = c;
 3e6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7de9a0>
 3ea:	08 95       	ret
