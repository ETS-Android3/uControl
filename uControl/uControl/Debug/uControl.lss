
uControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000004ea  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000004ea  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b8  00000000  00000000  00000519  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00005c14  00000000  00000000  000005d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00003f07  00000000  00000000  000061e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000903  00000000  00000000  0000a0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000198  00000000  00000000  0000a9f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000029f0  00000000  00000000  0000ab88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000248  00000000  00000000  0000d578  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  0000d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000472  00000472  000004e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000d848  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.int_init 0000001a  000003de  000003de  00000452  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .progmemx.data 0000002f  00000220  00000220  00000294  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 15 .text.__vector_104 000000f4  00000250  00000250  000002c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.tcc0_init 00000012  00000424  00000424  00000498  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    0000004a  00000344  00000344  000003b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.spi_init 00000018  000003f8  000003f8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.spi_write 0000000e  00000456  00000456  000004ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.spi_read 00000014  00000410  00000410  00000484  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.usartd0_init 00000022  000003bc  000003bc  00000430  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.usartd0_out_char 0000000e  00000464  00000464  000004d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.usartd0_out_int 00000010  00000436  00000436  000004aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.usartd0_out_string 0000002e  0000038e  0000038e  00000402  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.libgcc  00000010  00000446  00000446  000004ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
   8:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
   c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  10:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  14:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  18:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  1c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  20:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  24:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  28:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  2c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  30:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  34:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  38:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  3c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  40:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  44:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  48:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  4c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  50:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  54:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  58:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  5c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  60:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  64:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  68:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  6c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  70:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  74:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  78:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  7c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  80:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  84:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  88:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  8c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  90:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  94:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  98:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  9c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  a0:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  a4:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  a8:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  ac:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  b0:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  b4:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  b8:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  bc:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  c0:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  c4:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  c8:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  cc:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  d0:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  d4:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  d8:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  dc:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  e0:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  e4:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  e8:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  ec:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  f0:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  f4:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  f8:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
  fc:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 100:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 104:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 108:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 10c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 110:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 114:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 118:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 11c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 120:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 124:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 128:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 12c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 130:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 134:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 138:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 13c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 140:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 144:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 148:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 14c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 150:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 154:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 158:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 15c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 160:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 164:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 168:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 16c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 170:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 174:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 178:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 17c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 180:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 184:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 188:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 18c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 190:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 194:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 198:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 19c:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1a0:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_104>
 1a4:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1a8:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1ac:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1b0:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1b4:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1b8:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1bc:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1c0:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1c4:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1c8:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1cc:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1d0:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1d4:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1d8:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1dc:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1e0:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1e4:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1e8:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1ec:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1f0:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1f4:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>
 1f8:	0c 94 39 02 	jmp	0x472	; 0x472 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59
 214:	0e 94 a2 01 	call	0x344	; 0x344 <main>
 218:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>

Disassembly of section .text:

00000472 <__bad_interrupt>:
 472:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.int_init:

000003de <int_init>:


void int_init(void)
{
	//Enable low level interrupts
	PMIC.CTRL = PMIC_LOLVLEN_bm;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
	
	//Enable global interrupts
	sei();
 3e4:	78 94       	sei
	
	//Set the interrupt pin as an input and de-assert it for initialization.
	PORTF.DIRCLR = IRQ_bm;
 3e6:	e0 ea       	ldi	r30, 0xA0	; 160
 3e8:	f6 e0       	ldi	r31, 0x06	; 6
 3ea:	98 e0       	ldi	r25, 0x08	; 8
 3ec:	92 83       	std	Z+2, r25	; 0x02
	PORTF.OUTCLR = IRQ_bm;
 3ee:	96 83       	std	Z+6, r25	; 0x06
	
	//Low level interrupts on PORTF
	PORTF.INTCTRL = 0x01;
 3f0:	81 87       	std	Z+9, r24	; 0x09
	
	//PIN3 Interrupt enable
	PORTF.INT0MASK = IRQ_bm; 
 3f2:	92 87       	std	Z+10, r25	; 0x0a
	
	//Sense interrupts only on rising edge
	PORTF.PIN3CTRL = PORT_ISC_RISING_gc;
 3f4:	83 8b       	std	Z+19, r24	; 0x13
 3f6:	08 95       	ret

Disassembly of section .text.__vector_104:

00000250 <__vector_104>:
	//PORTF.INTFLAGS INT0IF is interrupt0 flag for PORTF
	
}

//Interrupt Service Routine for PORTF Interrupt0 on PIN3
ISR(PORTF_INT0_vect){
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	08 b6       	in	r0, 0x38	; 56
 25c:	0f 92       	push	r0
 25e:	18 be       	out	0x38, r1	; 56
 260:	09 b6       	in	r0, 0x39	; 57
 262:	0f 92       	push	r0
 264:	19 be       	out	0x39, r1	; 57
 266:	0a b6       	in	r0, 0x3a	; 58
 268:	0f 92       	push	r0
 26a:	1a be       	out	0x3a, r1	; 58
 26c:	0b b6       	in	r0, 0x3b	; 59
 26e:	0f 92       	push	r0
 270:	1b be       	out	0x3b, r1	; 59
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	2f 93       	push	r18
 278:	3f 93       	push	r19
 27a:	4f 93       	push	r20
 27c:	5f 93       	push	r21
 27e:	6f 93       	push	r22
 280:	7f 93       	push	r23
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
 286:	af 93       	push	r26
 288:	bf 93       	push	r27
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	ef 93       	push	r30
 290:	ff 93       	push	r31
	
	//Every time a packet is ready in the buffer of the device, we need to read it in.
	PORTF.OUTCLR = SS_bm;
 292:	80 e1       	ldi	r24, 0x10	; 16
 294:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7de6a6>
	spi_read();
 298:	0e 94 08 02 	call	0x410	; 0x410 <spi_read>
	spi_read();
 29c:	0e 94 08 02 	call	0x410	; 0x410 <spi_read>
	spi_read();
 2a0:	0e 94 08 02 	call	0x410	; 0x410 <spi_read>
	


	uint8_t num_bytes = spi_read();
 2a4:	0e 94 08 02 	call	0x410	; 0x410 <spi_read>
 2a8:	8c 01       	movw	r16, r24
	
	//Only display if we have actually received new data.
	
	if(num_bytes > 8){
 2aa:	89 30       	cpi	r24, 0x09	; 9
 2ac:	28 f0       	brcs	.+10     	; 0x2b8 <__vector_104+0x68>
		usartd0_out_string("Error: Packet size too large.");
 2ae:	60 e2       	ldi	r22, 0x20	; 32
 2b0:	72 e0       	ldi	r23, 0x02	; 2
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 c7 01 	call	0x38e	; 0x38e <usartd0_out_string>
	}
	
	
	if(num_bytes > 0 && num_bytes <= 8){
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	80 0f       	add	r24, r16
 2bc:	88 30       	cpi	r24, 0x08	; 8
 2be:	f8 f4       	brcc	.+62     	; 0x2fe <__vector_104+0xae>
	
	usartd0_out_string("Bytes received: ");
 2c0:	6e e3       	ldi	r22, 0x3E	; 62
 2c2:	72 e0       	ldi	r23, 0x02	; 2
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 c7 01 	call	0x38e	; 0x38e <usartd0_out_string>
 2ca:	11 27       	eor	r17, r17
	usartd0_out_int(num_bytes);
 2cc:	c8 01       	movw	r24, r16
 2ce:	0e 94 1b 02 	call	0x436	; 0x436 <usartd0_out_int>
	usartd0_out_char(' ');
 2d2:	80 e2       	ldi	r24, 0x20	; 32
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 32 02 	call	0x464	; 0x464 <usartd0_out_char>
	
	
	for(int i = 0; i < num_bytes-1; i++){
 2da:	c0 e0       	ldi	r28, 0x00	; 0
 2dc:	d0 e0       	ldi	r29, 0x00	; 0
 2de:	05 c0       	rjmp	.+10     	; 0x2ea <__vector_104+0x9a>
		usartd0_out_char(spi_read());
 2e0:	0e 94 08 02 	call	0x410	; 0x410 <spi_read>
 2e4:	0e 94 32 02 	call	0x464	; 0x464 <usartd0_out_char>
	usartd0_out_string("Bytes received: ");
	usartd0_out_int(num_bytes);
	usartd0_out_char(' ');
	
	
	for(int i = 0; i < num_bytes-1; i++){
 2e8:	21 96       	adiw	r28, 0x01	; 1
 2ea:	98 01       	movw	r18, r16
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	31 09       	sbc	r19, r1
 2f0:	c2 17       	cp	r28, r18
 2f2:	d3 07       	cpc	r29, r19
 2f4:	ac f3       	brlt	.-22     	; 0x2e0 <__vector_104+0x90>
		usartd0_out_char(spi_read());
	}
	
	
	
	usartd0_out_char('\n');
 2f6:	8a e0       	ldi	r24, 0x0A	; 10
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 32 02 	call	0x464	; 0x464 <usartd0_out_char>
	
	}
	PORTF.OUTSET = SS_bm;
 2fe:	e0 ea       	ldi	r30, 0xA0	; 160
 300:	f6 e0       	ldi	r31, 0x06	; 6
 302:	80 e1       	ldi	r24, 0x10	; 16
 304:	85 83       	std	Z+5, r24	; 0x05
	
	PORTF.INTFLAGS = 1; //Reset interrupt flag
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	84 87       	std	Z+12, r24	; 0x0c
}
 30a:	ff 91       	pop	r31
 30c:	ef 91       	pop	r30
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	bf 91       	pop	r27
 314:	af 91       	pop	r26
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	7f 91       	pop	r23
 31c:	6f 91       	pop	r22
 31e:	5f 91       	pop	r21
 320:	4f 91       	pop	r20
 322:	3f 91       	pop	r19
 324:	2f 91       	pop	r18
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	0f 90       	pop	r0
 32c:	0b be       	out	0x3b, r0	; 59
 32e:	0f 90       	pop	r0
 330:	0a be       	out	0x3a, r0	; 58
 332:	0f 90       	pop	r0
 334:	09 be       	out	0x39, r0	; 57
 336:	0f 90       	pop	r0
 338:	08 be       	out	0x38, r0	; 56
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

Disassembly of section .text.tcc0_init:

00000424 <tcc0_init>:


void tcc0_init(void)
{
//Load digital period (1sec1)*(2MHz/256) = 7812; 1Hz period calculation
TCC0.PER = 7812;
 424:	e0 e0       	ldi	r30, 0x00	; 0
 426:	f8 e0       	ldi	r31, 0x08	; 8
 428:	84 e8       	ldi	r24, 0x84	; 132
 42a:	9e e1       	ldi	r25, 0x1E	; 30
 42c:	86 a3       	std	Z+38, r24	; 0x26
 42e:	97 a3       	std	Z+39, r25	; 0x27

//Load prescaler to start the timer prescaler of 8
TCC0.CTRLA = TC_CLKSEL_DIV256_gc;
 430:	86 e0       	ldi	r24, 0x06	; 6
 432:	80 83       	st	Z, r24
 434:	08 95       	ret

Disassembly of section .text.main:

00000344 <main>:


int main(void)
{
	//Initialize Interrupts
	int_init();
 344:	0e 94 ef 01 	call	0x3de	; 0x3de <int_init>
	
	//Initialize Timer/Counter Module 0
	tcc0_init();
 348:	0e 94 12 02 	call	0x424	; 0x424 <tcc0_init>
	
	//Initialize SPI Module
	spi_init();
 34c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <spi_init>
	
	//Initialize UART Module 0
	usartd0_init();
 350:	0e 94 de 01 	call	0x3bc	; 0x3bc <usartd0_init>
	
    while(1)
    {
		
		//1 SECOND DELAY SO THE UART DEBUG CONSOLE IS NOT FLOODED
		while(!(TCC0.INTFLAGS & 1)); //Poll timer to check for overflow
 354:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <__TEXT_REGION_LENGTH__+0x7de80c>
 358:	80 ff       	sbrs	r24, 0
 35a:	fc cf       	rjmp	.-8      	; 0x354 <main+0x10>
		TCC0.INTFLAGS = 1; //Clear the Flag
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <__TEXT_REGION_LENGTH__+0x7de80c>
		
		//Read the buffer to tell the module to send an interrupt when there is new data in the buffer.
		PORTF.OUTCLR = SS_bm;
 362:	c0 ea       	ldi	r28, 0xA0	; 160
 364:	d6 e0       	ldi	r29, 0x06	; 6
 366:	10 e1       	ldi	r17, 0x10	; 16
 368:	1e 83       	std	Y+6, r17	; 0x06
		spi_write(0x10);
 36a:	80 e1       	ldi	r24, 0x10	; 16
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 2b 02 	call	0x456	; 0x456 <spi_write>
		spi_write(0x02);
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 2b 02 	call	0x456	; 0x456 <spi_write>
		spi_write(0x0A);
 37a:	8a e0       	ldi	r24, 0x0A	; 10
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 2b 02 	call	0x456	; 0x456 <spi_write>
		spi_write(0x00);
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 2b 02 	call	0x456	; 0x456 <spi_write>
		PORTF.OUTSET = SS_bm;
 38a:	1d 83       	std	Y+5, r17	; 0x05
		
		
		


    }
 38c:	e3 cf       	rjmp	.-58     	; 0x354 <main+0x10>

Disassembly of section .text.spi_init:

000003f8 <spi_init>:
void spi_write_string(const char * str){
	while(*str)
	{
		spi_write(*(str++));
	}
}
 3f8:	e0 ea       	ldi	r30, 0xA0	; 160
 3fa:	f6 e0       	ldi	r31, 0x06	; 6
 3fc:	80 e1       	ldi	r24, 0x10	; 16
 3fe:	85 83       	std	Z+5, r24	; 0x05
 400:	80 eb       	ldi	r24, 0xB0	; 176
 402:	81 83       	std	Z+1, r24	; 0x01
 404:	80 e4       	ldi	r24, 0x40	; 64
 406:	82 83       	std	Z+2, r24	; 0x02
 408:	81 e5       	ldi	r24, 0x51	; 81
 40a:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <__TEXT_REGION_LENGTH__+0x7debc0>
 40e:	08 95       	ret

Disassembly of section .text.spi_write:

00000456 <spi_write>:

void spi_write(uint8_t data)
{

	//Write the payload to the buffer to start a transfer.
	SPIF.DATA = data;
 456:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>
	
	//Wait for transmission to complete
	while(!(SPIF.STATUS & SPI_IF_bm));
 45a:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <__TEXT_REGION_LENGTH__+0x7debc2>
 45e:	88 23       	and	r24, r24
 460:	e4 f7       	brge	.-8      	; 0x45a <spi_write+0x4>
	
}
 462:	08 95       	ret

Disassembly of section .text.spi_read:

00000410 <spi_read>:

uint8_t spi_read(void)
{
	
	//Write any data to the SPI buffer to initiate a transfer.
	SPIF.DATA = 0x01;
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>

	//Wait for transmission to complete by polling the interrupt flag
	while(!(SPIF.STATUS & SPI_IF_bm));
 416:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <__TEXT_REGION_LENGTH__+0x7debc2>
 41a:	88 23       	and	r24, r24
 41c:	e4 f7       	brge	.-8      	; 0x416 <spi_read+0x6>
	
	//Return the data that was received.
	return SPIF.DATA;
 41e:	80 91 c3 0b 	lds	r24, 0x0BC3	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>
}
 422:	08 95       	ret

Disassembly of section .text.usartd0_init:

000003bc <usartd0_init>:
}

void usartd0_init(void)
{
  /* Configure relevant TxD and RxD pins. */
	PORTD.OUTSET = PIN3_bm;
 3bc:	e0 e6       	ldi	r30, 0x60	; 96
 3be:	f6 e0       	ldi	r31, 0x06	; 6
 3c0:	88 e0       	ldi	r24, 0x08	; 8
 3c2:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = PIN3_bm;
 3c4:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 3c6:	84 e0       	ldi	r24, 0x04	; 4
 3c8:	82 83       	std	Z+2, r24	; 0x02

  /* Configure baud rate. */
	USARTD0.BAUDCTRLA = (uint8_t)BSEL;
 3ca:	e0 ea       	ldi	r30, 0xA0	; 160
 3cc:	f9 e0       	ldi	r31, 0x09	; 9
 3ce:	8c e0       	ldi	r24, 0x0C	; 12
 3d0:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((BSCALE << 4)|(BSEL >> 8));
 3d2:	17 82       	std	Z+7, r1	; 0x07
	/*USARTD0.CTRLC =	(USART_CMODE_ASYNCHRONOUS_gc |
					 USART_PMODE_ODD_gc  	 |
					 USART_CHSIZE_8BIT_gc)       &
					 ~USART_SBMODE_bm; */
	
	USARTD0.CTRLC = (USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc) & ~USART_SBMODE_bm;
 3d4:	83 e0       	ldi	r24, 0x03	; 3
 3d6:	85 83       	std	Z+5, r24	; 0x05

  /* Enable receiver and/or transmitter systems. */
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 3d8:	88 e1       	ldi	r24, 0x18	; 24
 3da:	84 83       	std	Z+4, r24	; 0x04
 3dc:	08 95       	ret

Disassembly of section .text.usartd0_out_char:

00000464 <usartd0_out_char>:

}

void usartd0_out_char(char c)
{
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 464:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7de9a1>
 468:	95 ff       	sbrs	r25, 5
 46a:	fc cf       	rjmp	.-8      	; 0x464 <usartd0_out_char>
	USARTD0.DATA = c;
 46c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7de9a0>
 470:	08 95       	ret

Disassembly of section .text.usartd0_out_int:

00000436 <usartd0_out_int>:
}

void usartd0_out_int(int8_t c)
{
	//Convert to ASCII
	c += 0x30;
 436:	80 5d       	subi	r24, 0xD0	; 208
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 438:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7de9a1>
 43c:	95 ff       	sbrs	r25, 5
 43e:	fc cf       	rjmp	.-8      	; 0x438 <usartd0_out_int+0x2>
	USARTD0.DATA = c;
 440:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7de9a0>
 444:	08 95       	ret

Disassembly of section .text.usartd0_out_string:

0000038e <usartd0_out_string>:
  //Return the data in char format
  return USARTD0.DATA;
}

void usartd0_in_string(char * buf)
{
 38e:	cf 92       	push	r12
 390:	df 92       	push	r13
 392:	ef 92       	push	r14
 394:	6b 01       	movw	r12, r22
 396:	e8 2e       	mov	r14, r24
 398:	07 c0       	rjmp	.+14     	; 0x3a8 <usartd0_out_string+0x1a>
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	c8 1a       	sub	r12, r24
 39e:	d8 0a       	sbc	r13, r24
 3a0:	e8 0a       	sbc	r14, r24
 3a2:	86 2f       	mov	r24, r22
 3a4:	0e 94 32 02 	call	0x464	; 0x464 <usartd0_out_char>
 3a8:	f6 01       	movw	r30, r12
 3aa:	5e 2d       	mov	r21, r14
 3ac:	0e 94 23 02 	call	0x446	; 0x446 <__xload_1>
 3b0:	61 11       	cpse	r22, r1
 3b2:	f3 cf       	rjmp	.-26     	; 0x39a <usartd0_out_string+0xc>
 3b4:	ef 90       	pop	r14
 3b6:	df 90       	pop	r13
 3b8:	cf 90       	pop	r12
 3ba:	08 95       	ret

Disassembly of section .text.libgcc:

00000446 <__xload_1>:
 446:	57 fd       	sbrc	r21, 7
 448:	04 c0       	rjmp	.+8      	; 0x452 <__xload_1+0xc>
 44a:	5b bf       	out	0x3b, r21	; 59
 44c:	67 91       	elpm	r22, Z+
 44e:	1b be       	out	0x3b, r1	; 59
 450:	08 95       	ret
 452:	60 81       	ld	r22, Z
 454:	08 95       	ret
