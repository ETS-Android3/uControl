
uControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000004bc  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b8  00000000  00000000  000004eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00005bca  00000000  00000000  000005a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00003f07  00000000  00000000  0000616d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008f6  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000198  00000000  00000000  0000a96c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000029f0  00000000  00000000  0000ab04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000248  00000000  00000000  0000d4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  0000d73c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000444  00000444  000004b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000d7c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.int_init 0000001a  000003b0  000003b0  00000424  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .progmemx.data 00000011  00000220  00000220  00000294  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 15 .text.__vector_104 000000de  00000232  00000232  000002a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.tcc0_init 00000012  000003f6  000003f6  0000046a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000050  00000310  00000310  00000384  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.spi_init 00000018  000003ca  000003ca  0000043e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.spi_write 0000000e  00000428  00000428  0000049c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.spi_read 00000014  000003e2  000003e2  00000456  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.usartd0_init 00000022  0000038e  0000038e  00000402  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.usartd0_out_char 0000000e  00000436  00000436  000004aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.usartd0_out_int 00000010  00000408  00000408  0000047c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.usartd0_out_string 0000002e  00000360  00000360  000003d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.libgcc  00000010  00000418  00000418  0000048c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
   8:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
   c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  10:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  14:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  18:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  1c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  20:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  24:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  28:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  2c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  30:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  34:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  38:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  3c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  40:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  44:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  48:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  4c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  50:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  54:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  58:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  5c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  60:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  64:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  68:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  6c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  70:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  74:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  78:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  7c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  80:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  84:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  88:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  8c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  90:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  94:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  98:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  9c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  a0:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  a4:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  a8:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  ac:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  b0:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  b4:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  b8:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  bc:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  c0:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  c4:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  c8:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  cc:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  d0:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  d4:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  d8:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  dc:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  e0:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  e4:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  e8:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  ec:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  f0:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  f4:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  f8:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
  fc:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 100:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 104:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 108:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 10c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 110:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 114:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 118:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 11c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 120:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 124:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 128:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 12c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 130:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 134:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 138:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 13c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 140:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 144:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 148:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 14c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 150:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 154:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 158:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 15c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 160:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 164:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 168:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 16c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 170:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 174:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 178:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 17c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 180:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 184:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 188:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 18c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 190:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 194:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 198:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 19c:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1a0:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_104>
 1a4:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1a8:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1ac:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1b0:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1b4:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1b8:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1bc:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1c0:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1c4:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1c8:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1cc:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1d0:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1d4:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1d8:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1dc:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1e0:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1e4:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1e8:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1ec:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1f0:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1f4:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>
 1f8:	0c 94 22 02 	jmp	0x444	; 0x444 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59
 214:	0e 94 88 01 	call	0x310	; 0x310 <main>
 218:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>

Disassembly of section .text:

00000444 <__bad_interrupt>:
 444:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.int_init:

000003b0 <int_init>:


void int_init(void)
{
	//Enable low level interrupts
	PMIC.CTRL = PMIC_LOLVLEN_bm;
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7de0a2>
	//Enable global interrupts
	sei();
 3b6:	78 94       	sei
	PORTF.DIRCLR = IRQ_bm; //Make input
 3b8:	e0 ea       	ldi	r30, 0xA0	; 160
 3ba:	f6 e0       	ldi	r31, 0x06	; 6
 3bc:	98 e0       	ldi	r25, 0x08	; 8
 3be:	92 83       	std	Z+2, r25	; 0x02
	PORTF.OUTCLR = IRQ_bm;
 3c0:	96 83       	std	Z+6, r25	; 0x06
	PORTF.INTCTRL = 0x01; //Low level interrupts on PORTF
 3c2:	81 87       	std	Z+9, r24	; 0x09
	PORTF.INT0MASK = IRQ_bm; //PIN3 Interrupt enable
 3c4:	92 87       	std	Z+10, r25	; 0x0a
	PORTF.PIN3CTRL = PORT_ISC_RISING_gc; //Sense only on rising edge
 3c6:	83 8b       	std	Z+19, r24	; 0x13
 3c8:	08 95       	ret

Disassembly of section .text.__vector_104:

00000232 <__vector_104>:
	//PORTF.INTFLAGS INT0IF is flag
	
	
}

ISR(PORTF_INT0_vect){
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	08 b6       	in	r0, 0x38	; 56
 23e:	0f 92       	push	r0
 240:	18 be       	out	0x38, r1	; 56
 242:	09 b6       	in	r0, 0x39	; 57
 244:	0f 92       	push	r0
 246:	19 be       	out	0x39, r1	; 57
 248:	0a b6       	in	r0, 0x3a	; 58
 24a:	0f 92       	push	r0
 24c:	1a be       	out	0x3a, r1	; 58
 24e:	0b b6       	in	r0, 0x3b	; 59
 250:	0f 92       	push	r0
 252:	1b be       	out	0x3b, r1	; 59
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ef 93       	push	r30
 272:	ff 93       	push	r31
	
	//Every time a packet is ready in the buffer of the device, we need to read it in.
	
 	//PORTF.OUTTGL = 1;
	PORTF.OUTCLR = SS_bm;
 274:	80 e1       	ldi	r24, 0x10	; 16
 276:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7de6a6>
	spi_read();
 27a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <spi_read>
	spi_read();
 27e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <spi_read>
	spi_read();
 282:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <spi_read>
	
	usartd0_out_string("Bytes received: ");
 286:	60 e2       	ldi	r22, 0x20	; 32
 288:	72 e0       	ldi	r23, 0x02	; 2
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 b0 01 	call	0x360	; 0x360 <usartd0_out_string>


	uint8_t num_bytes = spi_read();
 290:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <spi_read>
 294:	8c 01       	movw	r16, r24
 296:	11 27       	eor	r17, r17
	usartd0_out_int(num_bytes);
 298:	c8 01       	movw	r24, r16
 29a:	0e 94 04 02 	call	0x408	; 0x408 <usartd0_out_int>
	usartd0_out_char(' ');
 29e:	80 e2       	ldi	r24, 0x20	; 32
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 1b 02 	call	0x436	; 0x436 <usartd0_out_char>
	
	
	for(int i = 0; i < num_bytes-1; i++){
 2a6:	c0 e0       	ldi	r28, 0x00	; 0
 2a8:	d0 e0       	ldi	r29, 0x00	; 0
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <__vector_104+0x84>
		usartd0_out_char(spi_read());
 2ac:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <spi_read>
 2b0:	0e 94 1b 02 	call	0x436	; 0x436 <usartd0_out_char>
	uint8_t num_bytes = spi_read();
	usartd0_out_int(num_bytes);
	usartd0_out_char(' ');
	
	
	for(int i = 0; i < num_bytes-1; i++){
 2b4:	21 96       	adiw	r28, 0x01	; 1
 2b6:	98 01       	movw	r18, r16
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	31 09       	sbc	r19, r1
 2bc:	c2 17       	cp	r28, r18
 2be:	d3 07       	cpc	r29, r19
 2c0:	ac f3       	brlt	.-22     	; 0x2ac <__vector_104+0x7a>
		usartd0_out_char(spi_read());
	}
	
	
	
	PORTF.OUTSET = SS_bm;
 2c2:	c0 ea       	ldi	r28, 0xA0	; 160
 2c4:	d6 e0       	ldi	r29, 0x06	; 6
 2c6:	80 e1       	ldi	r24, 0x10	; 16
 2c8:	8d 83       	std	Y+5, r24	; 0x05
	
	usartd0_out_char('\n');
 2ca:	8a e0       	ldi	r24, 0x0A	; 10
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 1b 02 	call	0x436	; 0x436 <usartd0_out_char>
	
	PORTF.INTFLAGS = 1; //Reset interrupt flag
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	8c 87       	std	Y+12, r24	; 0x0c
}
 2d6:	ff 91       	pop	r31
 2d8:	ef 91       	pop	r30
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	bf 91       	pop	r27
 2e0:	af 91       	pop	r26
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	7f 91       	pop	r23
 2e8:	6f 91       	pop	r22
 2ea:	5f 91       	pop	r21
 2ec:	4f 91       	pop	r20
 2ee:	3f 91       	pop	r19
 2f0:	2f 91       	pop	r18
 2f2:	1f 91       	pop	r17
 2f4:	0f 91       	pop	r16
 2f6:	0f 90       	pop	r0
 2f8:	0b be       	out	0x3b, r0	; 59
 2fa:	0f 90       	pop	r0
 2fc:	0a be       	out	0x3a, r0	; 58
 2fe:	0f 90       	pop	r0
 300:	09 be       	out	0x39, r0	; 57
 302:	0f 90       	pop	r0
 304:	08 be       	out	0x38, r0	; 56
 306:	0f 90       	pop	r0
 308:	0f be       	out	0x3f, r0	; 63
 30a:	0f 90       	pop	r0
 30c:	1f 90       	pop	r1
 30e:	18 95       	reti

Disassembly of section .text.tcc0_init:

000003f6 <tcc0_init>:


void tcc0_init(void)
{
//Load digital period (0.25secs)*(2MHz/8) = 62500; 4Hz
TCC0.PER = 7812;
 3f6:	e0 e0       	ldi	r30, 0x00	; 0
 3f8:	f8 e0       	ldi	r31, 0x08	; 8
 3fa:	84 e8       	ldi	r24, 0x84	; 132
 3fc:	9e e1       	ldi	r25, 0x1E	; 30
 3fe:	86 a3       	std	Z+38, r24	; 0x26
 400:	97 a3       	std	Z+39, r25	; 0x27

//CH0 Event trigger on overflow
//EVSYS_CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;

//Load prescaler to start the timer prescaler of 8
TCC0.CTRLA = TC_CLKSEL_DIV256_gc;
 402:	86 e0       	ldi	r24, 0x06	; 6
 404:	80 83       	st	Z, r24
 406:	08 95       	ret

Disassembly of section .text.main:

00000310 <main>:
}


int main(void)
{
	int_init();
 310:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <int_init>
	tcc0_init(); //Initialize Timer Counter Module 0
 314:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <tcc0_init>
	spi_init();
 318:	0e 94 e5 01 	call	0x3ca	; 0x3ca <spi_init>
	usartd0_init();
 31c:	0e 94 c7 01 	call	0x38e	; 0x38e <usartd0_init>
	
	PORTF.DIRSET = 1;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7de6a1>
	
    while(1)
    {
		

		while(!(TCC0.INTFLAGS & 1)); //Poll timer to check for overflow
 326:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <__TEXT_REGION_LENGTH__+0x7de80c>
 32a:	80 ff       	sbrs	r24, 0
 32c:	fc cf       	rjmp	.-8      	; 0x326 <main+0x16>
		TCC0.INTFLAGS = 1; //Reset the timer
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <__TEXT_REGION_LENGTH__+0x7de80c>
		
		//spi_write_string("ATI");
		//usartd0_out_char(spi_read());
		
		
		PORTF.OUTCLR = SS_bm;
 334:	c0 ea       	ldi	r28, 0xA0	; 160
 336:	d6 e0       	ldi	r29, 0x06	; 6
 338:	10 e1       	ldi	r17, 0x10	; 16
 33a:	1e 83       	std	Y+6, r17	; 0x06
	
		spi_write(0x10);           //10-01-0A-nBytes-0byte-1byte-...-nbyte this sends to uart
 33c:	80 e1       	ldi	r24, 0x10	; 16
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 14 02 	call	0x428	; 0x428 <spi_write>
		spi_write(0x02);
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 14 02 	call	0x428	; 0x428 <spi_write>
		spi_write(0x0A);
 34c:	8a e0       	ldi	r24, 0x0A	; 10
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 14 02 	call	0x428	; 0x428 <spi_write>
		spi_write(0x00);
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 14 02 	call	0x428	; 0x428 <spi_write>
		//spi_write_string("This is a test.\n");
		
		PORTF.OUTSET = SS_bm;
 35c:	1d 83       	std	Y+5, r17	; 0x05
		
		
		


    }
 35e:	e3 cf       	rjmp	.-58     	; 0x326 <main+0x16>

Disassembly of section .text.spi_init:

000003ca <spi_init>:
void spi_write_string(const char * str){
	while(*str)
	{
		spi_write(*(str++));
	}
}
 3ca:	e0 ea       	ldi	r30, 0xA0	; 160
 3cc:	f6 e0       	ldi	r31, 0x06	; 6
 3ce:	80 e1       	ldi	r24, 0x10	; 16
 3d0:	85 83       	std	Z+5, r24	; 0x05
 3d2:	80 eb       	ldi	r24, 0xB0	; 176
 3d4:	81 83       	std	Z+1, r24	; 0x01
 3d6:	80 e4       	ldi	r24, 0x40	; 64
 3d8:	82 83       	std	Z+2, r24	; 0x02
 3da:	81 e5       	ldi	r24, 0x51	; 81
 3dc:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <__TEXT_REGION_LENGTH__+0x7debc0>
 3e0:	08 95       	ret

Disassembly of section .text.spi_write:

00000428 <spi_write>:
void spi_write(uint8_t data)
{

	
	//Write data to the buffer to initiate a transfer.
	SPIF.DATA = data;
 428:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>
	
	//Wait for transmission to complete
	while(!(SPIF.STATUS & SPI_IF_bm));
 42c:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <__TEXT_REGION_LENGTH__+0x7debc2>
 430:	88 23       	and	r24, r24
 432:	e4 f7       	brge	.-8      	; 0x42c <spi_write+0x4>
	//PORTF.OUTSET = SS_bm;
	
}
 434:	08 95       	ret

Disassembly of section .text.spi_read:

000003e2 <spi_read>:
uint8_t spi_read(void)
{
	
	
	/* Write some arbitrary data to initiate a transfer. */
	SPIF.DATA = 0x01;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>

	//Wait for transmission to complete by polling the interrupt flag
	while(!(SPIF.STATUS & SPI_IF_bm));
 3e8:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <__TEXT_REGION_LENGTH__+0x7debc2>
 3ec:	88 23       	and	r24, r24
 3ee:	e4 f7       	brge	.-8      	; 0x3e8 <spi_read+0x6>
	
	//PORTF.OUTSET = SS_bm;
	
	/* After the transmission, return the data that was received. */
	return SPIF.DATA;
 3f0:	80 91 c3 0b 	lds	r24, 0x0BC3	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>
}
 3f4:	08 95       	ret

Disassembly of section .text.usartd0_init:

0000038e <usartd0_init>:
}

void usartd0_init(void)
{
  /* Configure relevant TxD and RxD pins. */
	PORTD.OUTSET = PIN3_bm;
 38e:	e0 e6       	ldi	r30, 0x60	; 96
 390:	f6 e0       	ldi	r31, 0x06	; 6
 392:	88 e0       	ldi	r24, 0x08	; 8
 394:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = PIN3_bm;
 396:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 398:	84 e0       	ldi	r24, 0x04	; 4
 39a:	82 83       	std	Z+2, r24	; 0x02

  /* Configure baud rate. */
	USARTD0.BAUDCTRLA = (uint8_t)BSEL;
 39c:	e0 ea       	ldi	r30, 0xA0	; 160
 39e:	f9 e0       	ldi	r31, 0x09	; 9
 3a0:	8c e0       	ldi	r24, 0x0C	; 12
 3a2:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((BSCALE << 4)|(BSEL >> 8));
 3a4:	17 82       	std	Z+7, r1	; 0x07
	/*USARTD0.CTRLC =	(USART_CMODE_ASYNCHRONOUS_gc |
					 USART_PMODE_ODD_gc  	 |
					 USART_CHSIZE_8BIT_gc)       &
					 ~USART_SBMODE_bm; */
	
	USARTD0.CTRLC = (USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc) & ~USART_SBMODE_bm;
 3a6:	83 e0       	ldi	r24, 0x03	; 3
 3a8:	85 83       	std	Z+5, r24	; 0x05

  /* Enable receiver and/or transmitter systems. */
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 3aa:	88 e1       	ldi	r24, 0x18	; 24
 3ac:	84 83       	std	Z+4, r24	; 0x04
 3ae:	08 95       	ret

Disassembly of section .text.usartd0_out_char:

00000436 <usartd0_out_char>:

}

void usartd0_out_char(char c)
{
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 436:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7de9a1>
 43a:	95 ff       	sbrs	r25, 5
 43c:	fc cf       	rjmp	.-8      	; 0x436 <usartd0_out_char>
	USARTD0.DATA = c;
 43e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7de9a0>
 442:	08 95       	ret

Disassembly of section .text.usartd0_out_int:

00000408 <usartd0_out_int>:
}

void usartd0_out_int(int8_t c)
{
	//Convert to ASCII
	c += 0x30;
 408:	80 5d       	subi	r24, 0xD0	; 208
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 40a:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7de9a1>
 40e:	95 ff       	sbrs	r25, 5
 410:	fc cf       	rjmp	.-8      	; 0x40a <usartd0_out_int+0x2>
	USARTD0.DATA = c;
 412:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7de9a0>
 416:	08 95       	ret

Disassembly of section .text.usartd0_out_string:

00000360 <usartd0_out_string>:
  //Return the data in char format
  return USARTD0.DATA;
}

void usartd0_in_string(char * buf)
{
 360:	cf 92       	push	r12
 362:	df 92       	push	r13
 364:	ef 92       	push	r14
 366:	6b 01       	movw	r12, r22
 368:	e8 2e       	mov	r14, r24
 36a:	07 c0       	rjmp	.+14     	; 0x37a <usartd0_out_string+0x1a>
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	c8 1a       	sub	r12, r24
 370:	d8 0a       	sbc	r13, r24
 372:	e8 0a       	sbc	r14, r24
 374:	86 2f       	mov	r24, r22
 376:	0e 94 1b 02 	call	0x436	; 0x436 <usartd0_out_char>
 37a:	f6 01       	movw	r30, r12
 37c:	5e 2d       	mov	r21, r14
 37e:	0e 94 0c 02 	call	0x418	; 0x418 <__xload_1>
 382:	61 11       	cpse	r22, r1
 384:	f3 cf       	rjmp	.-26     	; 0x36c <usartd0_out_string+0xc>
 386:	ef 90       	pop	r14
 388:	df 90       	pop	r13
 38a:	cf 90       	pop	r12
 38c:	08 95       	ret

Disassembly of section .text.libgcc:

00000418 <__xload_1>:
 418:	57 fd       	sbrc	r21, 7
 41a:	04 c0       	rjmp	.+8      	; 0x424 <__xload_1+0xc>
 41c:	5b bf       	out	0x3b, r21	; 59
 41e:	67 91       	elpm	r22, Z+
 420:	1b be       	out	0x3b, r1	; 59
 422:	08 95       	ret
 424:	60 81       	ld	r22, Z
 426:	08 95       	ret
