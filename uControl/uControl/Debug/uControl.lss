
uControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000003c6  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000003c6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b0  00000000  00000000  000003f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000059db  00000000  00000000  000004a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00003ede  00000000  00000000  00005e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000873  00000000  00000000  00009d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000012c  00000000  00000000  0000a5d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000029de  00000000  00000000  0000a700  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000112  00000000  00000000  0000d0de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000080  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000034e  0000034e  000003c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000d270  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.tcc0_init 00000012  000002fe  000002fe  00000372  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .progmemx.data 00000011  00000220  00000220  00000294  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 15 .text.main    00000062  00000232  00000232  000002a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.spi_init 00000018  000002e6  000002e6  0000035a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.spi_write 0000000e  00000332  00000332  000003a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.spi_write_string 0000002e  00000294  00000294  00000308  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.spi_read 00000012  00000310  00000310  00000384  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.usartd0_init 00000024  000002c2  000002c2  00000336  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.usartd0_out_char 0000000e  00000340  00000340  000003b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.libgcc  00000010  00000322  00000322  00000396  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
   8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
   c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  10:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  14:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  18:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  1c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  20:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  24:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  28:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  2c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  30:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  34:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  38:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  3c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  40:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  44:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  48:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  4c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  50:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  54:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  58:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  5c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  60:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  64:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  68:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  6c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  70:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  74:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  78:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  7c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  80:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  84:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  88:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  8c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  90:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  94:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  98:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  9c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  a0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  a4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  a8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  ac:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  b0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  b4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  b8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  bc:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  c0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  c4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  c8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  cc:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  d0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  d4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  d8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  dc:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  e0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  e4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  e8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  ec:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  f0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  f4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  f8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
  fc:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 100:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 104:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 108:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 10c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 110:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 114:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 118:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 11c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 120:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 124:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 128:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 12c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 130:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 134:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 138:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 13c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 140:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 144:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 148:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 14c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 150:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 154:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 158:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 15c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 160:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 164:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 168:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 16c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 170:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 174:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 178:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 17c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 180:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 184:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 188:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 18c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 190:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 194:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 198:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 19c:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1a0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1a4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1a8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1ac:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1b0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1b4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1b8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1bc:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1c0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1c4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1c8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1cc:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1d0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1d4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1d8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1dc:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1e0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1e4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1e8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1ec:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1f0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1f4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>
 1f8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59
 214:	0e 94 19 01 	call	0x232	; 0x232 <main>
 218:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>

Disassembly of section .text:

0000034e <__bad_interrupt>:
 34e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.tcc0_init:

000002fe <tcc0_init>:


void tcc0_init(void)
{
//Load digital period (0.25secs)*(2MHz/8) = 62500; 4Hz
TCC0.PER = 7812;
 2fe:	e0 e0       	ldi	r30, 0x00	; 0
 300:	f8 e0       	ldi	r31, 0x08	; 8
 302:	84 e8       	ldi	r24, 0x84	; 132
 304:	9e e1       	ldi	r25, 0x1E	; 30
 306:	86 a3       	std	Z+38, r24	; 0x26
 308:	97 a3       	std	Z+39, r25	; 0x27

//CH0 Event trigger on overflow
//EVSYS_CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;

//Load prescaler to start the timer prescaler of 8
TCC0.CTRLA = TC_CLKSEL_DIV256_gc;
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	80 83       	st	Z, r24
 30e:	08 95       	ret

Disassembly of section .text.main:

00000232 <main>:


int main(void)
{
	
	tcc0_init(); //Initialize Timer Counter Module 0
 232:	0e 94 7f 01 	call	0x2fe	; 0x2fe <tcc0_init>
	PORTF.DIRSET = (RST_bm);
 236:	e0 ea       	ldi	r30, 0xA0	; 160
 238:	f6 e0       	ldi	r31, 0x06	; 6
 23a:	88 e0       	ldi	r24, 0x08	; 8
 23c:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (RST_bm);
 23e:	85 83       	std	Z+5, r24	; 0x05
	//reset_module();
	spi_init();
 240:	0e 94 73 01 	call	0x2e6	; 0x2e6 <spi_init>
	usartd0_init();
 244:	0e 94 61 01 	call	0x2c2	; 0x2c2 <usartd0_init>
	
	
    while(1)
    {
		
		while(!(TCC0.INTFLAGS & 1)); //Poll timer to check for overflow
 248:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <__TEXT_REGION_LENGTH__+0x7de80c>
 24c:	80 ff       	sbrs	r24, 0
 24e:	fc cf       	rjmp	.-8      	; 0x248 <main+0x16>
		TCC0.INTFLAGS = 1; //Reset the timer
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <__TEXT_REGION_LENGTH__+0x7de80c>
		usartd0_out_char(spi_read());
 256:	0e 94 88 01 	call	0x310	; 0x310 <spi_read>
 25a:	0e 94 a0 01 	call	0x340	; 0x340 <usartd0_out_char>
		
		//spi_write_string("ATI");
		//usartd0_out_char(spi_read());
		PORTF.OUTCLR = SS_bm;
 25e:	c0 ea       	ldi	r28, 0xA0	; 160
 260:	d6 e0       	ldi	r29, 0x06	; 6
 262:	10 e1       	ldi	r17, 0x10	; 16
 264:	1e 83       	std	Y+6, r17	; 0x06
		
		spi_write(0x10);           //10-01-0A-nBytes-0byte-1byte-...-nbyte this sends to uart
 266:	80 e1       	ldi	r24, 0x10	; 16
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 99 01 	call	0x332	; 0x332 <spi_write>
		spi_write(0x01);
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 99 01 	call	0x332	; 0x332 <spi_write>
		spi_write(0x0A);
 276:	8a e0       	ldi	r24, 0x0A	; 10
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 99 01 	call	0x332	; 0x332 <spi_write>
		spi_write(0x10);
 27e:	80 e1       	ldi	r24, 0x10	; 16
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 99 01 	call	0x332	; 0x332 <spi_write>
		spi_write_string("This is a test.\n");
 286:	60 e2       	ldi	r22, 0x20	; 32
 288:	72 e0       	ldi	r23, 0x02	; 2
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 4a 01 	call	0x294	; 0x294 <spi_write_string>
		
		PORTF.OUTSET = SS_bm;
 290:	1d 83       	std	Y+5, r17	; 0x05


    }
 292:	da cf       	rjmp	.-76     	; 0x248 <main+0x16>

Disassembly of section .text.spi_init:

000002e6 <spi_init>:

void spi_init(void)
{
	
	//Slave select is active low so idle would be set high
	PORTF.OUTSET = (SS_bm);
 2e6:	e0 ea       	ldi	r30, 0xA0	; 160
 2e8:	f6 e0       	ldi	r31, 0x06	; 6
 2ea:	80 e1       	ldi	r24, 0x10	; 16
 2ec:	85 83       	std	Z+5, r24	; 0x05

	/* Configure the pin direction of relevant SPI signals. */
	//DIRSET = OUTPUTS
	PORTF.DIRSET = (SS_bm | MOSI_bm | SCK_bm);
 2ee:	80 eb       	ldi	r24, 0xB0	; 176
 2f0:	81 83       	std	Z+1, r24	; 0x01
 	PORTF.DIRCLR = (MISO_bm);
 2f2:	80 e4       	ldi	r24, 0x40	; 64
 2f4:	82 83       	std	Z+2, r24	; 0x02
	
	/* Set the other relevant SPI configurations. */
	SPIF.CTRL	=	(SPI_PRESCALER_DIV16_gc	|  SPI_MASTER_bm |  SPI_MODE_0_gc  |  SPI_ENABLE_bm);
 2f6:	81 e5       	ldi	r24, 0x51	; 81
 2f8:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <__TEXT_REGION_LENGTH__+0x7debc0>
 2fc:	08 95       	ret

Disassembly of section .text.spi_write:

00000332 <spi_write>:
void spi_write(uint8_t data)
{

	
	//Write data to the buffer to initiate a transfer.
	SPIF.DATA = data;
 332:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>
	
	//Wait for transmission to complete
	while(!(SPIF.STATUS & SPI_IF_bm));
 336:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <__TEXT_REGION_LENGTH__+0x7debc2>
 33a:	88 23       	and	r24, r24
 33c:	e4 f7       	brge	.-8      	; 0x336 <spi_write+0x4>
	//PORTF.OUTSET = SS_bm;
	
}
 33e:	08 95       	ret

Disassembly of section .text.spi_write_string:

00000294 <spi_write_string>:
	/* Set the other relevant SPI configurations. */
	SPIF.CTRL	=	(SPI_PRESCALER_DIV16_gc	|  SPI_MASTER_bm |  SPI_MODE_0_gc  |  SPI_ENABLE_bm);
}


void spi_write_string(const char * str){
 294:	cf 92       	push	r12
 296:	df 92       	push	r13
 298:	ef 92       	push	r14
 29a:	6b 01       	movw	r12, r22
 29c:	e8 2e       	mov	r14, r24
	while(*str)
 29e:	07 c0       	rjmp	.+14     	; 0x2ae <spi_write_string+0x1a>
	{
		spi_write(*(str++));
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	c8 1a       	sub	r12, r24
 2a4:	d8 0a       	sbc	r13, r24
 2a6:	e8 0a       	sbc	r14, r24
 2a8:	86 2f       	mov	r24, r22
 2aa:	0e 94 99 01 	call	0x332	; 0x332 <spi_write>
	SPIF.CTRL	=	(SPI_PRESCALER_DIV16_gc	|  SPI_MASTER_bm |  SPI_MODE_0_gc  |  SPI_ENABLE_bm);
}


void spi_write_string(const char * str){
	while(*str)
 2ae:	f6 01       	movw	r30, r12
 2b0:	5e 2d       	mov	r21, r14
 2b2:	0e 94 91 01 	call	0x322	; 0x322 <__xload_1>
 2b6:	61 11       	cpse	r22, r1
 2b8:	f3 cf       	rjmp	.-26     	; 0x2a0 <spi_write_string+0xc>
	{
		spi_write(*(str++));
	}
}
 2ba:	ef 90       	pop	r14
 2bc:	df 90       	pop	r13
 2be:	cf 90       	pop	r12
 2c0:	08 95       	ret

Disassembly of section .text.spi_read:

00000310 <spi_read>:
uint8_t spi_read(void)
{
	
	
	/* Write some arbitrary data to initiate a transfer. */
	SPIF.DATA = 0x00;
 310:	10 92 c3 0b 	sts	0x0BC3, r1	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>

	//Wait for transmission to complete by polling the interrupt flag
	while(!(SPIF.STATUS & SPI_IF_bm));
 314:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <__TEXT_REGION_LENGTH__+0x7debc2>
 318:	88 23       	and	r24, r24
 31a:	e4 f7       	brge	.-8      	; 0x314 <spi_read+0x4>
	
	//PORTF.OUTSET = SS_bm;
	
	/* After the transmission, return the data that was received. */
	return SPIF.DATA;
 31c:	80 91 c3 0b 	lds	r24, 0x0BC3	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>
}
 320:	08 95       	ret

Disassembly of section .text.usartd0_init:

000002c2 <usartd0_init>:
}

void usartd0_init(void)
{
  /* Configure relevant TxD and RxD pins. */
	PORTD.OUTSET = PIN3_bm;
 2c2:	e0 e6       	ldi	r30, 0x60	; 96
 2c4:	f6 e0       	ldi	r31, 0x06	; 6
 2c6:	88 e0       	ldi	r24, 0x08	; 8
 2c8:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = PIN3_bm;
 2ca:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 2cc:	84 e0       	ldi	r24, 0x04	; 4
 2ce:	82 83       	std	Z+2, r24	; 0x02

  /* Configure baud rate. */
	USARTD0.BAUDCTRLA = (uint8_t)BSEL;
 2d0:	e0 ea       	ldi	r30, 0xA0	; 160
 2d2:	f9 e0       	ldi	r31, 0x09	; 9
 2d4:	85 e0       	ldi	r24, 0x05	; 5
 2d6:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((BSCALE << 4)|(BSEL >> 8));
 2d8:	80 ea       	ldi	r24, 0xA0	; 160
 2da:	87 83       	std	Z+7, r24	; 0x07

  /* Configure remainder of serial protocol. */
  /* (In this example, a protocol with 8 data bits, ODD parity, and
   *  one stop bit is chosen.) */
	USARTD0.CTRLC =	(USART_CMODE_ASYNCHRONOUS_gc |
 2dc:	83 e3       	ldi	r24, 0x33	; 51
 2de:	85 83       	std	Z+5, r24	; 0x05
					 USART_PMODE_ODD_gc  	 |
					 USART_CHSIZE_8BIT_gc)       &
					 ~USART_SBMODE_bm;

  /* Enable receiver and/or transmitter systems. */
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 2e0:	88 e1       	ldi	r24, 0x18	; 24
 2e2:	84 83       	std	Z+4, r24	; 0x04
 2e4:	08 95       	ret

Disassembly of section .text.usartd0_out_char:

00000340 <usartd0_out_char>:

}

void usartd0_out_char(char c)
{
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 340:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7de9a1>
 344:	95 ff       	sbrs	r25, 5
 346:	fc cf       	rjmp	.-8      	; 0x340 <usartd0_out_char>
	USARTD0.DATA = c;
 348:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7de9a0>
 34c:	08 95       	ret

Disassembly of section .text.libgcc:

00000322 <__xload_1>:
 322:	57 fd       	sbrc	r21, 7
 324:	04 c0       	rjmp	.+8      	; 0x32e <__xload_1+0xc>
 326:	5b bf       	out	0x3b, r21	; 59
 328:	67 91       	elpm	r22, Z+
 32a:	1b be       	out	0x3b, r1	; 59
 32c:	08 95       	ret
 32e:	60 81       	ld	r22, Z
 330:	08 95       	ret
