
uControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000394  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b0  00000000  00000000  000003c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000059c1  00000000  00000000  00000473  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00003ef6  00000000  00000000  00005e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008b6  00000000  00000000  00009d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000012c  00000000  00000000  0000a5e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000029c4  00000000  00000000  0000a70c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000015a  00000000  00000000  0000d0d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000080  00000000  00000000  0000d22a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000033c  0000033c  00000390  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000d2ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.tcc0_init 00000012  0000031a  0000031a  0000036e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.reset_module 0000001c  000002e6  000002e6  0000033a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .progmemx.data 00000004  00000220  00000220  00000274  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 16 .text.main    00000050  00000224  00000224  00000278  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.spi_init 00000018  00000302  00000302  00000356  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.spi_write 00000020  000002c6  000002c6  0000031a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.spi_write_string 0000002e  00000274  00000274  000002c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.usartd0_init 00000024  000002a2  000002a2  000002f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.libgcc  00000010  0000032c  0000032c  00000380  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
   8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
   c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  10:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  14:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  18:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  1c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  20:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  24:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  28:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  2c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  30:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  34:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  38:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  3c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  40:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  44:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  48:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  4c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  50:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  54:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  58:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  5c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  60:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  64:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  68:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  6c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  70:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  74:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  78:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  7c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  80:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  84:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  88:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  8c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  90:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  94:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  98:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  9c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  a0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  a4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  a8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  ac:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  b0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  b4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  b8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  bc:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  c0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  c4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  c8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  cc:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  d0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  d4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  d8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  dc:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  e0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  e4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  e8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  ec:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  f0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  f4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  f8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
  fc:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 100:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 104:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 108:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 10c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 110:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 114:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 118:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 11c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 120:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 124:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 128:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 12c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 130:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 134:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 138:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 13c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 140:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 144:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 148:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 14c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 150:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 154:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 158:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 15c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 160:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 164:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 168:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 16c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 170:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 174:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 178:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 17c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 180:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 184:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 188:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 18c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 190:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 194:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 198:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 19c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1a0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1a4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1a8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1ac:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1b0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1b4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1b8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1bc:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1c0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1c4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1c8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1cc:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1d0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1d4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1d8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1dc:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1e0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1e4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1e8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1ec:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1f0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1f4:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>
 1f8:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59
 214:	0e 94 12 01 	call	0x224	; 0x224 <main>
 218:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>

Disassembly of section .text:

0000033c <__bad_interrupt>:
 33c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.tcc0_init:

0000031a <tcc0_init>:


void tcc0_init(void)
{
//Load digital period (0.25secs)*(2MHz/8) = 62500; 4Hz
TCC0.PER = 7812;
 31a:	e0 e0       	ldi	r30, 0x00	; 0
 31c:	f8 e0       	ldi	r31, 0x08	; 8
 31e:	84 e8       	ldi	r24, 0x84	; 132
 320:	9e e1       	ldi	r25, 0x1E	; 30
 322:	86 a3       	std	Z+38, r24	; 0x26
 324:	97 a3       	std	Z+39, r25	; 0x27

//CH0 Event trigger on overflow
//EVSYS_CH0MUX = EVSYS_CHMUX_TCC0_OVF_gc;

//Load prescaler to start the timer prescaler of 8
TCC0.CTRLA = TC_CLKSEL_DIV256_gc;
 326:	86 e0       	ldi	r24, 0x06	; 6
 328:	80 83       	st	Z, r24
 32a:	08 95       	ret

Disassembly of section .text.reset_module:

000002e6 <reset_module>:
}


void reset_module(void){
	PORTF.OUTCLR = (RST_bm);
 2e6:	88 e0       	ldi	r24, 0x08	; 8
 2e8:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <__TEXT_REGION_LENGTH__+0x7de6a6>
	
	TCC0.INTFLAGS = (1); //Reset the interrupt flag and then begin polling;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <__TEXT_REGION_LENGTH__+0x7de80c>
	
	while(!(TCC0.INTFLAGS & 1));
 2f2:	80 91 0c 08 	lds	r24, 0x080C	; 0x80080c <__TEXT_REGION_LENGTH__+0x7de80c>
 2f6:	80 ff       	sbrs	r24, 0
 2f8:	fc cf       	rjmp	.-8      	; 0x2f2 <reset_module+0xc>
	
	PORTF.OUTSET = (RST_bm);
 2fa:	88 e0       	ldi	r24, 0x08	; 8
 2fc:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <__TEXT_REGION_LENGTH__+0x7de6a5>
 300:	08 95       	ret

Disassembly of section .text.main:

00000224 <main>:


int main(void)
{
	
	tcc0_init();
 224:	0e 94 8d 01 	call	0x31a	; 0x31a <tcc0_init>
	
	PORTF.DIRSET = (RST_bm);
 228:	e0 ea       	ldi	r30, 0xA0	; 160
 22a:	f6 e0       	ldi	r31, 0x06	; 6
 22c:	88 e0       	ldi	r24, 0x08	; 8
 22e:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = (RST_bm);
 230:	85 83       	std	Z+5, r24	; 0x05
	
	reset_module();
 232:	0e 94 73 01 	call	0x2e6	; 0x2e6 <reset_module>
	
	
	
	spi_init();
 236:	0e 94 81 01 	call	0x302	; 0x302 <spi_init>
	usartd0_init();
 23a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <usartd0_init>
		//TCC0.INTFLAGS = 1; //Reset the timer
		//usartd0_out_char(spi_read());
		
		//spi_write_string("ATI");
		//usartd0_out_char(spi_read());
		PORTF.OUTCLR = SS_bm;
 23e:	c0 ea       	ldi	r28, 0xA0	; 160
 240:	d6 e0       	ldi	r29, 0x06	; 6
 242:	10 e1       	ldi	r17, 0x10	; 16
 244:	1e 83       	std	Y+6, r17	; 0x06
		
		spi_write(0x10);
 246:	80 e1       	ldi	r24, 0x10	; 16
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <spi_write>
		spi_write(0x01);
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 63 01 	call	0x2c6	; 0x2c6 <spi_write>
		spi_write(0x0A);
 256:	8a e0       	ldi	r24, 0x0A	; 10
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <spi_write>
		spi_write(0x03);
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 63 01 	call	0x2c6	; 0x2c6 <spi_write>
		spi_write_string("Poo");
 266:	60 e2       	ldi	r22, 0x20	; 32
 268:	72 e0       	ldi	r23, 0x02	; 2
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 3a 01 	call	0x274	; 0x274 <spi_write_string>
		
		PORTF.OUTSET = SS_bm;
 270:	1d 83       	std	Y+5, r17	; 0x05
 272:	e5 cf       	rjmp	.-54     	; 0x23e <main+0x1a>

Disassembly of section .text.spi_init:

00000302 <spi_init>:
	
  /* Initialize the relevant SPI output signals to be in an "idle" state.
   * Refer to the relevant timing diagram within the LSM6DSL data sheet.
   * (You may wish to utilize the macros defined in `spi.h`.) */
  //Slave select is active low so idle would be set high
  PORTF.OUTSET = (SS_bm);
 302:	e0 ea       	ldi	r30, 0xA0	; 160
 304:	f6 e0       	ldi	r31, 0x06	; 6
 306:	80 e1       	ldi	r24, 0x10	; 16
 308:	85 83       	std	Z+5, r24	; 0x05

  /* Configure the pin direction of relevant SPI signals. */
  //DIRSET = OUTPUTS
  PORTF.DIRSET = (SS_bm | MOSI_bm | SCK_bm);
 30a:	80 eb       	ldi	r24, 0xB0	; 176
 30c:	81 83       	std	Z+1, r24	; 0x01
 	PORTF.DIRCLR = (MISO_bm);
 30e:	80 e4       	ldi	r24, 0x40	; 64
 310:	82 83       	std	Z+2, r24	; 0x02
	
	/* Set the other relevant SPI configurations. */
	SPIF.CTRL	=	(SPI_PRESCALER_DIV16_gc	|  SPI_MASTER_bm |  SPI_MODE_0_gc  |  SPI_ENABLE_bm);
 312:	81 e5       	ldi	r24, 0x51	; 81
 314:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <__TEXT_REGION_LENGTH__+0x7debc0>
 318:	08 95       	ret

Disassembly of section .text.spi_write:

000002c6 <spi_write>:

void spi_write(uint8_t data)
{
	//PORTF.OUTCLR = SS_bm;
	
	for(int i = 0; i < 1000; i++); //Add delay
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <spi_write+0xa>
 2cc:	2f 5f       	subi	r18, 0xFF	; 255
 2ce:	3f 4f       	sbci	r19, 0xFF	; 255
 2d0:	28 3e       	cpi	r18, 0xE8	; 232
 2d2:	93 e0       	ldi	r25, 0x03	; 3
 2d4:	39 07       	cpc	r19, r25
 2d6:	d4 f3       	brlt	.-12     	; 0x2cc <spi_write+0x6>
	
	//Write data
	SPIF.DATA = data;
 2d8:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x7debc3>
	
	//Wait for transmission to complete
	while(!(SPIF.STATUS & SPI_IF_bm));
 2dc:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <__TEXT_REGION_LENGTH__+0x7debc2>
 2e0:	88 23       	and	r24, r24
 2e2:	e4 f7       	brge	.-8      	; 0x2dc <spi_write+0x16>
   * function, say `spi_transceive`, that both writes and reads 
   * data, rather than have two functions `spi_write` and `spi_read`,
   * but we will not concern ourselves with this possibility
   * during this semester of the course. */

}
 2e4:	08 95       	ret

Disassembly of section .text.spi_write_string:

00000274 <spi_write_string>:
	/* Set the other relevant SPI configurations. */
	SPIF.CTRL	=	(SPI_PRESCALER_DIV16_gc	|  SPI_MASTER_bm |  SPI_MODE_0_gc  |  SPI_ENABLE_bm);
}


void spi_write_string(const char * str){
 274:	cf 92       	push	r12
 276:	df 92       	push	r13
 278:	ef 92       	push	r14
 27a:	6b 01       	movw	r12, r22
 27c:	e8 2e       	mov	r14, r24
	while(*str)
 27e:	07 c0       	rjmp	.+14     	; 0x28e <spi_write_string+0x1a>
	{
		spi_write(*(str++));
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	c8 1a       	sub	r12, r24
 284:	d8 0a       	sbc	r13, r24
 286:	e8 0a       	sbc	r14, r24
 288:	86 2f       	mov	r24, r22
 28a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <spi_write>
	SPIF.CTRL	=	(SPI_PRESCALER_DIV16_gc	|  SPI_MASTER_bm |  SPI_MODE_0_gc  |  SPI_ENABLE_bm);
}


void spi_write_string(const char * str){
	while(*str)
 28e:	f6 01       	movw	r30, r12
 290:	5e 2d       	mov	r21, r14
 292:	0e 94 96 01 	call	0x32c	; 0x32c <__xload_1>
 296:	61 11       	cpse	r22, r1
 298:	f3 cf       	rjmp	.-26     	; 0x280 <spi_write_string+0xc>
	{
		spi_write(*(str++));
	}
}
 29a:	ef 90       	pop	r14
 29c:	df 90       	pop	r13
 29e:	cf 90       	pop	r12
 2a0:	08 95       	ret

Disassembly of section .text.usartd0_init:

000002a2 <usartd0_init>:
}

void usartd0_init(void)
{
  /* Configure relevant TxD and RxD pins. */
	PORTD.OUTSET = PIN3_bm;
 2a2:	e0 e6       	ldi	r30, 0x60	; 96
 2a4:	f6 e0       	ldi	r31, 0x06	; 6
 2a6:	88 e0       	ldi	r24, 0x08	; 8
 2a8:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRSET = PIN3_bm;
 2aa:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 2ac:	84 e0       	ldi	r24, 0x04	; 4
 2ae:	82 83       	std	Z+2, r24	; 0x02

  /* Configure baud rate. */
	USARTD0.BAUDCTRLA = (uint8_t)BSEL;
 2b0:	e0 ea       	ldi	r30, 0xA0	; 160
 2b2:	f9 e0       	ldi	r31, 0x09	; 9
 2b4:	85 e0       	ldi	r24, 0x05	; 5
 2b6:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = (uint8_t)((BSCALE << 4)|(BSEL >> 8));
 2b8:	80 ea       	ldi	r24, 0xA0	; 160
 2ba:	87 83       	std	Z+7, r24	; 0x07

  /* Configure remainder of serial protocol. */
  /* (In this example, a protocol with 8 data bits, ODD parity, and
   *  one stop bit is chosen.) */
	USARTD0.CTRLC =	(USART_CMODE_ASYNCHRONOUS_gc |
 2bc:	83 e3       	ldi	r24, 0x33	; 51
 2be:	85 83       	std	Z+5, r24	; 0x05
					 USART_PMODE_ODD_gc  	 |
					 USART_CHSIZE_8BIT_gc)       &
					 ~USART_SBMODE_bm;

  /* Enable receiver and/or transmitter systems. */
	USARTD0.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 2c0:	88 e1       	ldi	r24, 0x18	; 24
 2c2:	84 83       	std	Z+4, r24	; 0x04
 2c4:	08 95       	ret

Disassembly of section .text.libgcc:

0000032c <__xload_1>:
 32c:	57 fd       	sbrc	r21, 7
 32e:	04 c0       	rjmp	.+8      	; 0x338 <__xload_1+0xc>
 330:	5b bf       	out	0x3b, r21	; 59
 332:	67 91       	elpm	r22, Z+
 334:	1b be       	out	0x3b, r1	; 59
 336:	08 95       	ret
 338:	60 81       	ld	r22, Z
 33a:	08 95       	ret
